{"ast":null,"code":"var __spreadArray = this && this.__spreadArray || function (to, from) {\n  for (var i = 0, il = from.length, j = to.length; i < il; i++, j++) to[j] = from[i];\n\n  return to;\n};\n\nimport { KeyCodeMap } from './interface';\n\nvar HotKeyManager =\n/** @class */\nfunction () {\n  function HotKeyManager() {\n    var _this = this;\n\n    this.registeredHotkeys = {};\n    this.pressedKeys = new Map();\n\n    this.registerHotKey = function (hotkey) {\n      var keyComb = _this.getKeyComb(__spreadArray([], hotkey.keys));\n\n      if (!_this.registeredHotkeys[keyComb]) {\n        _this.registeredHotkeys[keyComb] = [];\n      }\n\n      _this.registeredHotkeys[keyComb].push(hotkey);\n    };\n\n    this.getKeyComb = function (keys) {\n      var convertKeys = keys.map(function (item) {\n        // @ts-expect-error\n        var stringKey = KeyCodeMap[item];\n\n        if (stringKey) {\n          return stringKey;\n        }\n\n        return item;\n      });\n      return convertKeys.sort().join(' ');\n    };\n\n    this.removeHotKey = function (hotKey) {\n      var _a, _b;\n\n      var keyComb = _this.getKeyComb(__spreadArray([], hotKey.keys));\n\n      var index = (_b = (_a = _this.registeredHotkeys[keyComb]) === null || _a === void 0 ? void 0 : _a.indexOf(hotKey)) !== null && _b !== void 0 ? _b : -1;\n\n      if (index !== -1) {\n        _this.registeredHotkeys[keyComb].splice(index, 1);\n\n        return true;\n      }\n\n      return false;\n    };\n\n    window.addEventListener('keydown', function (e) {\n      var _a;\n\n      _this.pressedKeys.set(e.key, e.repeat);\n\n      console.log('key', e.key);\n\n      var keyComb = _this.getKeyComb(Array.from(_this.pressedKeys.keys()));\n\n      (_a = _this.registeredHotkeys[keyComb]) === null || _a === void 0 ? void 0 : _a.forEach(function (hotKey) {\n        if (!e.repeat || (hotKey === null || hotKey === void 0 ? void 0 : hotKey.repeat)) {\n          if (hotKey.preventDefault) e.preventDefault();\n          hotKey.handler(__spreadArray([], hotKey.keys));\n        }\n      });\n    });\n    window.addEventListener('keyup', function (e) {\n      if (_this.pressedKeys.has(e.key)) {\n        _this.pressedKeys.delete(e.key);\n      }\n    });\n  }\n\n  return HotKeyManager;\n}();\n\nexport default new HotKeyManager();","map":{"version":3,"mappings":"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","names":["KeyCodeMap","Map","hotkey","keyComb","_this","getKeyComb","__spreadArray","keys","registeredHotkeys","push","convertKeys","map","stringKey","item","sort","join","hotKey","index","_a","indexOf","_b","splice","window","addEventListener","e","pressedKeys","set","key","repeat","console","log","Array","from","forEach","preventDefault","handler","has","delete","HotKeyManager"],"sourceRoot":"","sources":["../../src/hotkeyManager.ts"],"sourcesContent":[null]},"metadata":{},"sourceType":"module"}