{"ast":null,"code":"const data = {\n  // ros connection\n  ros: null,\n  rosbridge_address: 'ws://127.0.0.1:9090/',\n  connected: false,\n  // service information\n  service_busy: false,\n  service_response: ''\n};\nexport const connect = () => {\n  console.log(\"Clic en connect\");\n  data.ros = new ROSLIB.Ros({\n    url: data.rosbridge_address\n  }); //--------------------------------------------\n  //nos suscribimos al topic del movimiento\n\n  let topic = new ROSLIB.Topic({\n    ros: data.ros,\n    name: '/odom',\n    messageType: 'nav_msgs/msg/Odometry'\n  });\n  topic.subscribe(message => {\n    data.position = message.pose.pose.position; //document.getElementById(\"pos_x\").innerHTML = data.position.x.toFixed(2)\n    //document.getElementById(\"pos_y\").innerHTML = data.position.y.toFixed(2)\n  }); //--------------------------------------------\n  // Define callbacks\n\n  data.ros.on(\"connection\", () => {\n    data.connected = true;\n    console.log(\"Conexion con ROSBridge correcta\");\n    document.getElementById(\"robot_conectado\").innerHTML = \"Robot conectado\"; //setCamera();\n  });\n  data.ros.on(\"error\", error => {\n    console.log(\"Se ha producido algun error mientras se intentaba realizar la conexion\");\n    console.log(error);\n  });\n  data.ros.on(\"close\", () => {\n    data.connected = false;\n    console.log(\"Conexion con ROSBridge cerrada\");\n  });\n};\nexport const disconnect = () => {\n  data.ros.close();\n  data.connected = false;\n  console.log('Clic en bot贸n de desconexi贸n');\n  document.getElementById(\"robot_conectado\").innerHTML = \"Robot desconctado\"; // quitamos camara\n\n  document.getElementById(\"divCamera\").innerHTML = \"\";\n};\nexport const call_delante_service = async valor => {\n  console.log(\"Estoy dentro de call delaten service \" + valor);\n  data.service_busy = true;\n  data.service_response = ''; //definimos los datos del servicio\n\n  let service = new ROSLIB.Service({\n    ros: data.ros,\n    name: '/movement',\n    serviceType: 'marselotech_custom_interface/srv/MyMoveMsg'\n  });\n  let request = new ROSLIB.ServiceRequest({\n    move: valor\n  });\n  service.callService(request, result => {\n    data.service_busy = false;\n    data.service_response = JSON.stringify(result);\n  }, error => {\n    data.service_busy = false;\n    console.error(error);\n  });\n};\nexport const detectar_caras = () => {\n  connect();\n\n  try {\n    console.log(\"conectarse a la camara\");\n    data.service_busy = true;\n    data.service_response = '';\n    let service = new ROSLIB.Service({\n      ros: data.ros,\n      name: '/detection',\n      serviceType: 'marselotech_custom_interface/srv/DetectionMsg'\n    });\n    let request = new ROSLIB.ServiceRequest({\n      type: valor\n    });\n    service.callService(request, result => {\n      data.service_busy = false;\n      data.service_response = JSON.stringify(result);\n      console.log(\"Servicio conectado ---> \");\n      console.log(JSON.stringify(result));\n    }, error => {\n      data.service_busy = false;\n      console.error(\"Error en el callback del servicio\");\n    });\n  } catch (error) {\n    console.error(\"Error en el try catch\");\n  }\n};\nexport const detectar_personas = async valor => {\n  try {\n    console.log(\"conectarse a la camara\");\n    data.service_busy = true;\n    data.service_response = '';\n    let service = new ROSLIB.Service({\n      ros: data.ros,\n      name: '/detection',\n      serviceType: 'marselotech_custom_interface/srv/DetectionMsg'\n    });\n    let request = new ROSLIB.ServiceRequest({\n      type: valor\n    });\n    service.callService(request, result => {\n      data.service_busy = false;\n      data.service_response = JSON.stringify(result);\n      console.log(\"Servicio conectado ---> \");\n      console.log(JSON.stringify(result));\n    }, error => {\n      data.service_busy = false;\n      console.error(\"Error en el callback del servicio\");\n    });\n  } catch (error) {\n    console.error(\"Error en el try catch\");\n  }\n};","map":{"version":3,"names":["data","ros","rosbridge_address","connected","service_busy","service_response","connect","console","log","ROSLIB","Ros","url","topic","Topic","name","messageType","subscribe","message","position","pose","on","document","getElementById","innerHTML","error","disconnect","close","call_delante_service","valor","service","Service","serviceType","request","ServiceRequest","move","callService","result","JSON","stringify","detectar_caras","type","detectar_personas"],"sources":["/opt/lampp/htdocs/marselotech-web/marselotech-web/src/robot.js"],"sourcesContent":["const data = {\n    // ros connection\n    ros: null,\n    rosbridge_address: 'ws://127.0.0.1:9090/',\n    connected: false,\n    // service information\n    service_busy: false,\n    service_response: ''\n}\n\nexport const  connect = () => {\n    console.log(\"Clic en connect\")\n\n    data.ros = new ROSLIB.Ros({\n        url: data.rosbridge_address\n\n    });\n\n    //--------------------------------------------\n    //nos suscribimos al topic del movimiento\n    let topic = new ROSLIB.Topic({\n        ros: data.ros,\n        name: '/odom',\n        messageType: 'nav_msgs/msg/Odometry'\n    });\n    topic.subscribe((message) => {\n        data.position = message.pose.pose.position\n        //document.getElementById(\"pos_x\").innerHTML = data.position.x.toFixed(2)\n        //document.getElementById(\"pos_y\").innerHTML = data.position.y.toFixed(2)\n    });\n    //--------------------------------------------\n\n\n    // Define callbacks\n    data.ros.on(\"connection\", () => {\n        data.connected = true\n        console.log(\"Conexion con ROSBridge correcta\")\n        document.getElementById(\"robot_conectado\").innerHTML=\"Robot conectado\"\n        //setCamera();\n    });\n\n    data.ros.on(\"error\", (error) => {\n        console.log(\"Se ha producido algun error mientras se intentaba realizar la conexion\")\n        console.log(error)\n    });\n\n    data.ros.on(\"close\", () => {\n        data.connected = false\n        console.log(\"Conexion con ROSBridge cerrada\")\n    });\n}\n\nexport const disconnect= () => {\n    data.ros.close()\n    data.connected = false\n    console.log('Clic en bot贸n de desconexi贸n')\n    document.getElementById(\"robot_conectado\").innerHTML=\"Robot desconctado\"\n\n    // quitamos camara\n    document.getElementById(\"divCamera\").innerHTML = \"\"\n}\n\n\n\nexport const call_delante_service = async valor =>{\n\n    console.log(\"Estoy dentro de call delaten service \"+valor)\n    data.service_busy = true\n    data.service_response = ''\n\n    //definimos los datos del servicio\n    let service = new ROSLIB.Service({\n        ros: data.ros,\n        name: '/movement',\n        serviceType: 'marselotech_custom_interface/srv/MyMoveMsg'\n    })\n\n    let request = new ROSLIB.ServiceRequest({\n        move: valor\n    })\n\n    service.callService(request, (result) => {\n        data.service_busy = false\n        data.service_response = JSON.stringify(result)\n    }, (error) => {\n        data.service_busy = false\n        console.error(error)\n    })\n}\n\nexport const detectar_caras = () => {\n    connect();\n\n    try {\n\n        console.log(\"conectarse a la camara\")\n\n        data.service_busy = true\n        data.service_response = ''\n\n        let service = new ROSLIB.Service({\n            ros: data.ros,\n            name: '/detection',\n            serviceType: 'marselotech_custom_interface/srv/DetectionMsg'\n        })\n\n        let request = new ROSLIB.ServiceRequest({\n            type: valor\n        })\n\n        service.callService(request, (result) => {\n            data.service_busy = false\n            data.service_response = JSON.stringify(result)\n            console.log(\"Servicio conectado ---> \" )\n            console.log(JSON.stringify(result))\n        }, (error) => {\n            data.service_busy = false\n            console.error(\"Error en el callback del servicio\")\n        })\n    } catch (error) {\n        console.error(\"Error en el try catch\")\n    }\n\n}\n\nexport const detectar_personas = async valor => {\n    \n    try {\n\n        console.log(\"conectarse a la camara\")\n\n        data.service_busy = true\n        data.service_response = ''\n\n        let service = new ROSLIB.Service({\n            ros: data.ros,\n            name: '/detection',\n            serviceType: 'marselotech_custom_interface/srv/DetectionMsg'\n        })\n\n        let request = new ROSLIB.ServiceRequest({\n            type: valor\n        })\n\n        service.callService(request, (result) => {\n            data.service_busy = false\n            data.service_response = JSON.stringify(result)\n            console.log(\"Servicio conectado ---> \" )\n            console.log(JSON.stringify(result))\n        }, (error) => {\n            data.service_busy = false\n            console.error(\"Error en el callback del servicio\")\n        })\n    } catch (error) {\n        console.error(\"Error en el try catch\")\n    }\n\n}\n\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}