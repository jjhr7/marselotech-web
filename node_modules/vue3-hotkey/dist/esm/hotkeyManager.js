var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
import { KeyCodeMap } from './interface';
var HotKeyManager = /** @class */ (function () {
    function HotKeyManager() {
        var _this = this;
        this.registeredHotkeys = {};
        this.pressedKeys = new Map();
        this.registerHotKey = function (hotkey) {
            var keyComb = _this.getKeyComb(__spreadArray([], hotkey.keys));
            if (!_this.registeredHotkeys[keyComb]) {
                _this.registeredHotkeys[keyComb] = [];
            }
            _this.registeredHotkeys[keyComb].push(hotkey);
        };
        this.getKeyComb = function (keys) {
            var convertKeys = keys.map(function (item) {
                // @ts-expect-error
                var stringKey = KeyCodeMap[item];
                if (stringKey) {
                    return stringKey;
                }
                return item;
            });
            return convertKeys.sort().join(' ');
        };
        this.removeHotKey = function (hotKey) {
            var _a, _b;
            var keyComb = _this.getKeyComb(__spreadArray([], hotKey.keys));
            var index = (_b = (_a = _this.registeredHotkeys[keyComb]) === null || _a === void 0 ? void 0 : _a.indexOf(hotKey)) !== null && _b !== void 0 ? _b : -1;
            if (index !== -1) {
                _this.registeredHotkeys[keyComb].splice(index, 1);
                return true;
            }
            return false;
        };
        window.addEventListener('keydown', function (e) {
            var _a;
            _this.pressedKeys.set(e.key, e.repeat);
            console.log('key', e.key);
            var keyComb = _this.getKeyComb(Array.from(_this.pressedKeys.keys()));
            (_a = _this.registeredHotkeys[keyComb]) === null || _a === void 0 ? void 0 : _a.forEach(function (hotKey) {
                if (!e.repeat || (hotKey === null || hotKey === void 0 ? void 0 : hotKey.repeat)) {
                    if (hotKey.preventDefault)
                        e.preventDefault();
                    hotKey.handler(__spreadArray([], hotKey.keys));
                }
            });
        });
        window.addEventListener('keyup', function (e) {
            if (_this.pressedKeys.has(e.key)) {
                _this.pressedKeys.delete(e.key);
            }
        });
    }
    return HotKeyManager;
}());
export default new HotKeyManager();
//# sourceMappingURL=hotkeyManager.js.map